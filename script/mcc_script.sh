#!/usr/bin/env bash
# CHTC guide: http://chtc.cs.wisc.edu/matlab-jobs.shtml

# TODO usage docs
# TODO defined default behavior (also included in docs)
#  assume matlab runtime in cwd named by naming convention unless option provided
#  assume version 2014b directory unless option provided

# use getopt(1) for C's getoptlong command line argument style in bash -{{
# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options
# NOTE that flags do not have a trailing ":" while named arguments do
TEMP=`getopt -o hv:m: --long help,version:,matlab: -n 'mcc_script.sh' -- "$@"`
if [ $? != 0 ] ; then 
  # then getopt failed, terminate
  echo "Terminating..." >&2
  exit 1
fi
eval set -- "$TEMP"

HELP=0
MATLAB_RUNTIME_VER="r2014b"
MATLAB_RUNTIME_FP="${MATLAB_RUNTIME_VER}.tar.gz"
while true; do
  case "$1" in
    -h | --help ) HELP=1; shift ;;
    -v | --version ) MATLAB_RUNTIME_VER="$2"; shift 2 ;;
    -m | --matlab ) MATLAB_RUNTIME_FP="$2"; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done
# remaining positional arguments can be accessed normally (because of "shift")
# }}-

usage="usage: $0 [-h] [-v <matlab_version>] [-m <matlab_runtime>] -- <mcc_compiled_exe> [args..]"
if [ "$HELP" = "1" ]; then
  echo "$usage"
  exit 0
fi

MCC_COMPILED_EXE="$1"
shift 1 # remaining arguments are taken to be arguments of the MCC_COMPILED_EXE
if [ -z "$MCC_COMPILED_EXE" ]; then
  echo "[error] Set MCC_COMPILED_EXE to the filepath of the mcc-compiled file generated by mcc"
  exit 1
fi

# Setup LD_LIBRARY_PATH depending on Matlab version
# Matlab runtime tar will be extracted in the current working directory and the MCRROOT is a filepath
# to the extracted contents of the Matlab runtime tar archive
MCRROOT=""
declare -A MATLAB_VER_TO_DIR
MATLAB_VER_TO_DIR["r2015b"]="v90"
MATLAB_VER_TO_DIR["r2014b"]="v84"
MATLAB_VER_TO_DIR["r2013b"]="v82"
MCRROOT="${MATLAB_VER_TO_DIR[$MATLAB_RUNTIME_VER]}"
if [ -z "$MCRROOT" ]; then
  echo "[error] unrecognized MATLAB version" >&2
  exit 3
fi
echo "[status] Setting up environment variables" >&2
LD_LIBRARY_PATH=.:${MCRROOT}/runtime/glnxa64 ;
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MCRROOT}/bin/glnxa64 ;
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MCRROOT}/sys/os/glnxa64;
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${MCRROOT}/sys/opengl/lib/glnxa64;
export LD_LIBRARY_PATH;
echo "[status] LD_LIBRARY_PATH is ${LD_LIBRARY_PATH}" >&2;

# Extract Matlab runtime so that files refered to on LD_LIBRARY_PATH exist
if [ -d "$MCRROOT" ]; then
  echo "[status] Matlab runtime already extracted" >&2
else
  if [ -f "$MATLAB_RUNTIME_FP" ]; then
    echo "[status] Extracting Matlab runtime" >&2
    # this will extract the tar in the current working directory
    # TODO behavior of tar is be system dependent but may or may not change in this paricular behavior
    tar xzf "$MATLAB_RUNTIME_FP"
    mkdir cache
    export MCR_CACHE_ROOT=`pwd`/cache
    echo "[status] Runtime setup complete"
  else
    echo "[error] Missing Matlab runtime ${MATLAB_RUNTIME_VER}" >&2
    exit 2
  fi
fi

# parse arguments given to this script to give to the mcc-compiled binary
args=
while [ $# -gt 0 ]; do
  token=$1
  args="${args} \"${token}\"" 
  shift
done

eval "\"${MCC_COMPILED_EXE}\"" $args
exitstatus="$?"
echo "[status] $MCC_COMPILED_EXE exited with status: $exitstatus" >&2
exit $exitstatus
